Thu Jun  1 19:16:17 PDT 2023
Linux csslab22 4.18.0-425.3.1.el8.x86_64 #1 SMP Wed Nov 9 20:13:27 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux
uid=1353848(agrach) gid=2121353848(agrach) groups=2121353848(agrach),605559(lab-access)
=====================================================
1. Compilation warnings are in the section below
=====================================================
=====================================================
2. Program output are in the section below
=====================================================
test1 done.
test2 done.
test3 done.
test4 done.
Done.
=====================================================
3. clang-tidy warnings are in the section below
=====================================================
13129 warnings generated.
18892 warnings generated.
35091 warnings generated.
/home/NETID/agrach/2023win342d-p4-agrach060/skiplist.cpp:29:20: error: 2 adjacent parameters of 'SkipList' of similar type ('int') are easily swapped by mistake [bugprone-easily-swappable-parameters,-warnings-as-errors]
SkipList::SkipList(int levels, int probability)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/NETID/agrach/2023win342d-p4-agrach060/skiplist.cpp:29:24: note: the first parameter in the range is 'levels'
SkipList::SkipList(int levels, int probability)
                       ^~~~~~
/home/NETID/agrach/2023win342d-p4-agrach060/skiplist.cpp:29:36: note: the last parameter in the range is 'probability'
SkipList::SkipList(int levels, int probability)
                                   ^~~~~~~~~~~
Suppressed 35090 warnings (35090 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
1 warning treated as error
=====================================================
4. clang-format warnings are in the section below
=====================================================
Running clang-format on ./main.cpp
Running clang-format on ./random.cpp
Running clang-format on ./skiplist.cpp
=====================================================
5. Memory leak issues are in the section below
=====================================================

=================================================================
==2785668==ERROR: LeakSanitizer: detected memory leaks

Direct leak of 64 byte(s) in 2 object(s) allocated from:
    #0 0x7f94d368a7b0 in operator new(unsigned long) (/lib64/libasan.so.5+0xf17b0)
    #1 0x406919 in SkipList::SkipList(SkipList const&) /home/NETID/agrach/2023win342d-p4-agrach060/skiplist.cpp:45
    #2 0x40482b in test4() /home/NETID/agrach/2023win342d-p4-agrach060/main.cpp:110
    #3 0x404ed7 in main /home/NETID/agrach/2023win342d-p4-agrach060/main.cpp:135
    #4 0x7f94d28ded84 in __libc_start_main (/lib64/libc.so.6+0x3ad84)

Indirect leak of 128 byte(s) in 4 object(s) allocated from:
    #0 0x7f94d368a7b0 in operator new(unsigned long) (/lib64/libasan.so.5+0xf17b0)
    #1 0x406919 in SkipList::SkipList(SkipList const&) /home/NETID/agrach/2023win342d-p4-agrach060/skiplist.cpp:45
    #2 0x40482b in test4() /home/NETID/agrach/2023win342d-p4-agrach060/main.cpp:110
    #3 0x404ed7 in main /home/NETID/agrach/2023win342d-p4-agrach060/main.cpp:135
    #4 0x7f94d28ded84 in __libc_start_main (/lib64/libc.so.6+0x3ad84)

Indirect leak of 112 byte(s) in 6 object(s) allocated from:
    #0 0x7f94d368a7b0 in operator new(unsigned long) (/lib64/libasan.so.5+0xf17b0)
    #1 0x40af2c in __gnu_cxx::new_allocator<SNode*>::allocate(unsigned long, void const*) /usr/include/c++/8/ext/new_allocator.h:111
    #2 0x40ab65 in std::allocator_traits<std::allocator<SNode*> >::allocate(std::allocator<SNode*>&, unsigned long) /usr/include/c++/8/bits/alloc_traits.h:436
    #3 0x40a45b in std::_Vector_base<SNode*, std::allocator<SNode*> >::_M_allocate(unsigned long) /usr/include/c++/8/bits/stl_vector.h:296
    #4 0x40a5f4 in std::_Vector_base<SNode*, std::allocator<SNode*> >::_M_create_storage(unsigned long) /usr/include/c++/8/bits/stl_vector.h:311
    #5 0x4094a4 in std::_Vector_base<SNode*, std::allocator<SNode*> >::_Vector_base(unsigned long, std::allocator<SNode*> const&) /usr/include/c++/8/bits/stl_vector.h:260
    #6 0x40827b in std::vector<SNode*, std::allocator<SNode*> >::vector(unsigned long, SNode* const&, std::allocator<SNode*> const&) /usr/include/c++/8/bits/stl_vector.h:429
    #7 0x406343 in SNode::SNode(SNode const&) /home/NETID/agrach/2023win342d-p4-agrach060/skiplist.cpp:26
    #8 0x40692b in SkipList::SkipList(SkipList const&) /home/NETID/agrach/2023win342d-p4-agrach060/skiplist.cpp:45
    #9 0x40482b in test4() /home/NETID/agrach/2023win342d-p4-agrach060/main.cpp:110
    #10 0x404ed7 in main /home/NETID/agrach/2023win342d-p4-agrach060/main.cpp:135
    #11 0x7f94d28ded84 in __libc_start_main (/lib64/libc.so.6+0x3ad84)

SUMMARY: AddressSanitizer: 304 byte(s) leaked in 12 allocation(s).
=====================================================
6. valgrind memory test is in the section below. Look for "definitely lost" 
=====================================================
==2785681== Memcheck, a memory error detector
==2785681== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==2785681== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==2785681== Command: ./a.out
==2785681== Parent PID: 2785584
==2785681== 
==2785681== 
==2785681== HEAP SUMMARY:
==2785681==     in use at exit: 304 bytes in 12 blocks
==2785681==   total heap usage: 181 allocs, 169 frees, 83,450 bytes allocated
==2785681== 
==2785681== LEAK SUMMARY:
==2785681==    definitely lost: 64 bytes in 2 blocks
==2785681==    indirectly lost: 240 bytes in 10 blocks
==2785681==      possibly lost: 0 bytes in 0 blocks
==2785681==    still reachable: 0 bytes in 0 blocks
==2785681==         suppressed: 0 bytes in 0 blocks
==2785681== Rerun with --leak-check=full to see details of leaked memory
==2785681== 
==2785681== For lists of detected and suppressed errors, rerun with: -s
==2785681== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Code coverage information is in the section below
=====================================================
File '/home/NETID/agrach/2023win342d-p4-agrach060/main.cpp':
Name                        Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
-------------------------------------------------------------------------------------------------------
test1()                           1       0 100.00%        22       6  72.73%         0       0   0.00%
test2()                           1       0 100.00%        15       2  86.67%         0       0   0.00%
test3()                           1       0 100.00%        29       8  72.41%         0       0   0.00%
test4()                           1       0 100.00%        24       6  75.00%         0       0   0.00%
main                              1       0 100.00%         8       0 100.00%         0       0   0.00%
-------------------------------------------------------------------------------------------------------
TOTAL                             5       0 100.00%        98      22  77.55%         0       0   0.00%

File '/home/NETID/agrach/2023win342d-p4-agrach060/random.cpp':
Name                        Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
-------------------------------------------------------------------------------------------------------
Random::random()                  3       1  66.67%         6       2  66.67%         2       1  50.00%
-------------------------------------------------------------------------------------------------------
TOTAL                             3       1  66.67%         6       2  66.67%         2       1  50.00%

File '/home/NETID/agrach/2023win342d-p4-agrach060/skiplist.cpp':
Name                                                           Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
------------------------------------------------------------------------------------------------------------------------------------------
SkipList::shouldInsertAtHigherLevel() const                          1       0 100.00%         3       0 100.00%         0       0   0.00%
SNode::SNode(int)                                                    1       0 100.00%         4       0 100.00%         0       0   0.00%
SNode::SNode(SNode const&)                                           1       0 100.00%         1       0 100.00%         0       0   0.00%
SkipList::SkipList(int, int)                                         1       0 100.00%         4       0 100.00%         0       0   0.00%
SkipList::SkipList(SkipList const&)                                  8       1  87.50%        19       4  78.95%         6       1  83.33%
operator<<(std::ostream&, SkipList const&)                           6       0 100.00%        12       0 100.00%         4       0 100.00%
SkipList::~SkipList()                                                3       0 100.00%         8       0 100.00%         2       0 100.00%
SkipList::getBeforeNodes(int) const                                  8       0 100.00%        11       0 100.00%         6       0 100.00%
SkipList::add(int)                                                   9       0 100.00%        14       0 100.00%         6       1  83.33%
SkipList::add(std::vector<int, std::allocator<int> > const&)         4       0 100.00%         5       0 100.00%         2       0 100.00%
SkipList::remove(int)                                               16       1  93.75%        19       3  84.21%        12       4  66.67%
SkipList::contains(int) const                                       10       0 100.00%        10       0 100.00%        10       0 100.00%
------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                               68       2  97.06%       110       7  93.64%        48       6  87.50%
/home/NETID/agrach/2023win342d-p4-agrach060/main.cpp:
    1|       |#include "skiplist.h"
    2|       |#include <cassert>
    3|       |#include <iostream>
    4|       |#include <sstream>
    5|       |
    6|       |using namespace std;
    7|       |
    8|       |// ************************************
    9|       |// IMPORTANT: The below tests use Random::random to get random numbers, so
   10|       |// adding more tests (or removing tests) will change how the SkipList is
   11|       |// structured! Calling Random::random unnecessarily may also break tests.
   12|       |// On the plus side, each run uses the same random numbers which makes
   13|       |// debugginng easier.
   14|       |// ************************************
   15|       |
   16|       |// testing basic operations: operator<<, add, contains
   17|      1|void test1() {
   18|      1|  stringstream outSS;
   19|      1|  SkipList skp;
   20|      1|  skp.add(3);
   21|      1|  outSS << skp;
   22|      1|  assert(outSS.str() == "[level: 1] 3-->nullptr\n");
   23|      0|  skp.add(9);
   24|      1|  outSS.str("");
   25|      1|  outSS << skp;
   26|      1|  assert(outSS.str() == "[level: 1] 3-->9-->nullptr\n");
   27|      0|  skp.add(1);
   28|      1|  outSS.str("");
   29|      1|  outSS << skp;
   30|      1|  assert(outSS.str() == "[level: 1] 1-->3-->9-->nullptr\n");
   31|      0|  skp.add(vector<int>{7, 5});
   32|      1|  outSS.str("");
   33|      1|  outSS << skp;
   34|      1|  assert(outSS.str() == "[level: 1] 1-->3-->5-->7-->9-->nullptr\n");
   35|      0|  assert(skp.contains(1) && skp.contains(7) && skp.contains(9));
   36|      0|  assert(!skp.contains(0) && !skp.contains(20));
   37|       |
   38|       |  // TODO(student) check there are no memory leaks after test completed
   39|      0|  cout << "test1 done." << endl;
   40|      1|}
   41|       |
   42|       |// testing the copy constructor for the SkipList
   43|      1|void test2() {
   44|      1|  stringstream outSS;
   45|      1|  SkipList *skp1 = new SkipList;
   46|      1|  skp1->add(vector<int>{9, 1, 7, 5});
   47|       |
   48|      1|  outSS.str("");
   49|      1|  outSS << *skp1;
   50|      1|  assert(outSS.str() == "[level: 1] 1-->5-->7-->9-->nullptr\n");
   51|       |
   52|      0|  SkipList *skp2 = new SkipList(*skp1);
   53|      1|  delete skp1;
   54|      1|  outSS.str("");
   55|      1|  outSS << *skp2;
   56|      1|  assert(outSS.str() == "[level: 1] 1-->5-->7-->9-->nullptr\n");
   57|      0|  delete skp2;
   58|       |  // TODO(student) check there are no memory leaks after test completed
   59|      1|  cout << "test2 done." << endl;
   60|      1|}
   61|       |
   62|       |// testing SkipList with multiple levels
   63|      1|void test3() {
   64|      1|  stringstream outSS;
   65|      1|  SkipList skp(3, 80);
   66|      1|  skp.add(vector<int>{9, 1, 7, 5, 3, 20});
   67|       |
   68|      1|  outSS << skp;
   69|      1|  assert(outSS.str() == "[level: 3] 7-->nullptr\n"
   70|      1|                        "[level: 2] 3-->7-->nullptr\n"
   71|      1|                        "[level: 1] 1-->3-->5-->7-->9-->20-->nullptr\n");
   72|       |
   73|      0|  skp.add(vector<int>{-20, 100});
   74|      1|  outSS.str("");
   75|      1|  outSS << skp;
   76|      1|  assert(outSS.str() ==
   77|      1|         "[level: 3] -20-->7-->100-->nullptr\n"
   78|      1|         "[level: 2] -20-->3-->7-->100-->nullptr\n"
   79|      1|         "[level: 1] -20-->1-->3-->5-->7-->9-->20-->100-->nullptr\n");
   80|       |
   81|       |  // TODO(student) check that contains searches from top level down
   82|      0|  assert(skp.contains(1) && skp.contains(7) && skp.contains(9));
   83|      0|  assert(!skp.contains(0) && !skp.contains(200));
   84|      0|  assert(skp.contains(-20) && skp.contains(100));
   85|       |
   86|      0|  SkipList skp2(3, 30);
   87|      1|  skp2.add(vector<int>{9, 1, 7, 5, 3, 20});
   88|      1|  outSS.str("");
   89|      1|  outSS << skp2;
   90|      1|  assert(outSS.str() == "[level: 3] nullptr\n"
   91|      1|                        "[level: 2] 3-->5-->nullptr\n"
   92|      1|                        "[level: 1] 1-->3-->5-->7-->9-->20-->nullptr\n");
   93|       |
   94|      0|  assert(skp2.contains(3) && skp2.contains(5) && skp2.contains(20));
   95|      0|  assert(!skp2.contains(-3) && !skp2.contains(4) && !skp2.contains(200));
   96|       |  // TODO(student) check there are no memory leaks after test completed
   97|      0|  cout << "test3 done." << endl;
   98|      1|}
   99|       |
  100|       |// removing from multi-level SkipList
  101|      1|void test4() {
  102|      1|  stringstream outSS;
  103|      1|  SkipList skp(3, 50);
  104|      1|  skp.add(vector<int>{9, 1, 7, 5, 3, 20});
  105|       |
  106|      1|  outSS << skp;
  107|      1|  assert(outSS.str() == "[level: 3] 20-->nullptr\n"
  108|      1|                        "[level: 2] 3-->5-->7-->9-->20-->nullptr\n"
  109|      1|                        "[level: 1] 1-->3-->5-->7-->9-->20-->nullptr\n");
  110|      0|  SkipList skp2(skp);
  111|      1|  assert(skp.remove(1));
  112|      0|  assert(!skp.remove(100));
  113|      0|  assert(skp.remove(9));
  114|       |
  115|      0|  outSS.str("");
  116|      1|  outSS << skp;
  117|      1|  assert(outSS.str() == "[level: 3] 20-->nullptr\n"
  118|      1|                        "[level: 2] 3-->5-->7-->20-->nullptr\n"
  119|      1|                        "[level: 1] 3-->5-->7-->20-->nullptr\n");
  120|       |
  121|       |  // skp2 should be unchanged
  122|      0|  outSS.str("");
  123|      1|  outSS << skp2;
  124|      1|  assert(outSS.str() == "[level: 3] 20-->nullptr\n"
  125|      1|                        "[level: 2] 3-->5-->7-->9-->20-->nullptr\n"
  126|      1|                        "[level: 1] 1-->3-->5-->7-->9-->20-->nullptr\n");
  127|       |  // TODO(student) check there are no memory leaks after test completed
  128|      0|  cout << "test4 done." << endl;
  129|      1|}
  130|       |
  131|      1|int main() {
  132|      1|  test1();
  133|      1|  test2();
  134|      1|  test3();
  135|      1|  test4();
  136|      1|  cout << "Done." << endl;
  137|      1|  return 0;
  138|      1|}

/home/NETID/agrach/2023win342d-p4-agrach060/random.cpp:
    1|       |#include "random.h"
    2|       |#include <vector>
    3|       |
    4|     31|int Random::random() {
    5|     31|  if (counter >= NUMS.size()) {
    6|      0|    counter = 0;
    7|      0|  }
    8|     31|  return NUMS[counter++];
    9|     31|}
   10|       |
   11|       |int Random::counter = 0;
   12|       |
   13|       |const vector<int> Random::NUMS = {
   14|       |    1804289383, 846930886,  1681692777, 1714636915, 1957747793, 424238335,
   15|       |    719885386,  1649760492, 596516649,  1189641421, 1025202362, 1350490027,
   16|       |    783368690,  1102520059, 2044897763, 1967513926, 1365180540, 1540383426,
   17|       |    304089172,  1303455736, 35005211,   521595368,  294702567,  1726956429,
   18|       |    336465782,  861021530,  278722862,  233665123,  2145174067, 468703135,
   19|       |    1101513929, 1801979802, 1315634022, 635723058,  1369133069, 1125898167,
   20|       |    1059961393, 2089018456, 628175011,  1656478042, 1131176229, 1653377373,
   21|       |    859484421,  1914544919, 608413784,  756898537,  1734575198, 1973594324,
   22|       |    149798315,  2038664370, 1129566413, 184803526,  412776091,  1424268980,
   23|       |    1911759956, 749241873,  137806862,  42999170,   982906996,  135497281,
   24|       |    511702305,  2084420925, 1937477084, 1827336327, 572660336,  1159126505,
   25|       |    805750846,  1632621729, 1100661313, 1433925857, 1141616124, 84353895,
   26|       |    939819582,  2001100545, 1998898814, 1548233367, 610515434,  1585990364,
   27|       |    1374344043, 760313750,  1477171087, 356426808,  945117276,  1889947178,
   28|       |    1780695788, 709393584,  491705403,  1918502651, 752392754,  1474612399,
   29|       |    2053999932, 1264095060, 1411549676, 1843993368, 943947739,  1984210012,
   30|       |    855636226,  1749698586, 1469348094, 1956297539
   31|       |
   32|       |};

/home/NETID/agrach/2023win342d-p4-agrach060/skiplist.cpp:
    1|       |#include "skiplist.h"
    2|       |#include "random.h"
    3|       |#include <cassert>
    4|       |#include <climits>
    5|       |#include <cstdlib>
    6|       |#include <iostream>
    7|       |#include <unordered_map>
    8|       |
    9|       |using namespace std;
   10|       |
   11|       |// checks if the value needs to be inserted at a higher level
   12|     31|bool SkipList::shouldInsertAtHigherLevel() const {
   13|     31|  return probability >= Random::random() % 100;
   14|     31|}
   15|       |
   16|       |// you code goes here
   17|       |
   18|       |// SNode constructor
   19|     34|SNode::SNode(int val) {
   20|     34|  this->val = val;
   21|     34|  this->next.resize(1, nullptr);
   22|     34|}
   23|       |
   24|       |// SNode copy constructor
   25|       |SNode::SNode(const SNode &other)
   26|     18|    : val(other.val), next(other.next.size(), nullptr) {}
   27|       |
   28|       |// SkipList constructor
   29|       |SkipList::SkipList(int levels, int probability)
   30|      5|    : levels(levels), probability(probability) {
   31|      5|  head = new SNode();
   32|      5|  head->next.resize(levels, nullptr);
   33|      5|}
   34|       |
   35|       |// SkipList copy constructor
   36|       |SkipList::SkipList(const SkipList &other)
   37|      2|    : levels(other.levels), probability(other.probability) {
   38|      2|  head = new SNode(*other.head); // Copy the head node
   39|       |
   40|       |  // Copy the elements from the original SkipList
   41|      6|  for (int i = 0; i < levels; ++i) {
   42|      4|    SNode *current = other.head->next[i];
   43|      4|    SNode *prev = head;
   44|     20|    while (current != nullptr) {
   45|     16|      SNode *newNode = new SNode(*current); // Create a copy of the node
   46|     16|      prev->next[i] = newNode;
   47|     16|      prev = newNode;
   48|     16|      current = current->next[i];
   49|     16|    }
   50|      4|    prev->next[i] = nullptr; // Set the next pointer of the last node to nullptr
   51|       |
   52|       |    // Deallocate unused nodes at this level
   53|      4|    while (prev->next.size() > levels) {
   54|      0|      SNode *nextNode = prev->next.back();
   55|      0|      prev->next.pop_back();
   56|      0|      delete nextNode;
   57|      0|    }
   58|      4|  }
   59|      2|}
   60|       |
   61|       |// SkipList operator<<
   62|     12|ostream &operator<<(ostream &out, const SkipList &skip) {
   63|     36|  for (int i = skip.levels - 1; i >= 0; i--) {
   64|     24|    out << "[level: " << i + 1 << "] ";
   65|     24|    SNode *curr = skip.head->next[i];
   66|    108|    while (curr != nullptr) {
   67|     84|      out << curr->val << "-->";
   68|     84|      curr = curr->next[i];
   69|     84|    }
   70|     24|    out << "nullptr\n";
   71|     24|  }
   72|     12|  return out;
   73|     12|}
   74|       |
   75|      7|SkipList::~SkipList() {
   76|     51|  while (head != nullptr) {
   77|     44|    SNode *curr = head;
   78|     44|    head = head->next[0];
   79|     44|    delete curr;
   80|     44|  }
   81|      7|  delete head;
   82|      7|}
   83|       |
   84|       |// collect all SNode* objects that come before this value at each level
   85|       |// used as a helper function to add and remove
   86|     32|vector<SNode *> SkipList::getBeforeNodes(int val) const {
   87|     32|  vector<SNode *> beforeNodes(levels, nullptr);
   88|     32|  SNode *curr = head;
   89|    110|  for (int i = levels - 1; i >= 0; i--) {
   90|    112|    while (curr->next[i] != nullptr && curr->next[i]->val < val) {
   91|     34|      curr = curr->next[i];
   92|     34|    }
   93|     78|    beforeNodes[i] = curr;
   94|     78|  }
   95|       |
   96|     32|  return beforeNodes;
   97|     32|}
   98|       |
   99|       |// Add to list, assume no duplicates
  100|     29|void SkipList::add(int val) {
  101|     29|  vector<SNode *> beforeNodes = getBeforeNodes(val);
  102|     29|  SNode *newNode = new SNode(val);
  103|     29|  newNode->next[0] = beforeNodes[0]->next[0];
  104|     29|  beforeNodes[0]->next[0] = newNode;
  105|     44|  for (int i = 1; i < levels; i++) {
  106|     31|    if (i < levels && shouldInsertAtHigherLevel()) {
  107|     15|      newNode->next.push_back(beforeNodes[i]->next[i]);
  108|     15|      beforeNodes[i]->next[i] = newNode;
  109|     16|    } else {
  110|     16|      break;
  111|     16|    }
  112|     31|  }
  113|     29|}
  114|       |
  115|       |// Add a vector of values to list, assume no duplicates
  116|      6|void SkipList::add(const vector<int> &values) {
  117|     32|  for (int i = 0; i < values.size(); i++) {
  118|     26|    add(values[i]);
  119|     26|  }
  120|      6|}
  121|       |
  122|      3|bool SkipList::remove(int val) {
  123|      3|  vector<SNode *> beforeNodes = getBeforeNodes(val);
  124|      3|  SNode *nodeToRemove = beforeNodes[0]->next[0];
  125|       |
  126|       |  // check if the node to remove exists
  127|      3|  if (nodeToRemove == nullptr || nodeToRemove->val != val) {
  128|      1|    return false; // value not found
  129|      1|  }
  130|       |
  131|       |  // update links to remove node at all levels
  132|      5|  for (int i = 0; i < levels; i++) {
  133|      5|    if (beforeNodes[i]->next[i] != nodeToRemove) {
  134|      2|      break;
  135|      2|    }
  136|      3|    beforeNodes[i]->next[i] = nodeToRemove->next[i];
  137|      3|  }
  138|       |
  139|       |  // remove any unused levels
  140|      2|  while (levels > 1 && head->next[levels - 1] == nullptr) {
  141|      0|    head->next.pop_back();
  142|      0|    levels--;
  143|      0|  }
  144|       |
  145|       |  // delete the node
  146|      2|  delete nodeToRemove;
  147|       |
  148|      2|  return true; // value successfully removed
  149|      3|}
  150|       |
  151|     18|bool SkipList::contains(int val) const {
  152|     18|  SNode *node = head;
  153|     62|  for (int i = levels - 1; i >= 0; i--) {
  154|     82|    while (node->next[i] != nullptr && node->next[i]->val < val) {
  155|     38|      node = node->next[i];
  156|     38|    }
  157|     44|  }
  158|     18|  node = node->next[0];
  159|     18|  return (node != nullptr && node->val == val);
  160|     18|}

Thu Jun  1 19:16:27 PDT 2023
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
